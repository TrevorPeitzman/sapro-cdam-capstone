import React, { Component } from 'react'; // { useState } ??? 
import ReactDOM from 'react-dom';
import { Storage } from 'aws-amplify';
import { styled } from '@mui/material/styles';
import ReactPDF, { PDFDownloadLink, Document, Image, Page, Text, View, StyleSheet } from '@react-pdf/renderer';
import { Grid, Box, Paper, Button, Snackbar, Alert, Menu, MenuItem, Typography } from '@mui/material';
import { Buffer } from 'buffer';
// https://www.youtube.com/watch?v=KuWLhLFfeRc Youtube - user 'Arslan' - "Export a Chart in Chartjs using React"
import { Doughnut } from "react-chartjs-2";
import Chart from "chart.js/auto"
import { CategoryScale } from "chart.js";
import ChartJSImage from 'chart.js-image';

//Chart.register(CategoryScale);
/*
// Create the chart
var myChart = new Chart(document.getElementById('chart').getContext('2d'), {
    type: 'horizontalBar',
    data: {
        labels: ['One', 'Two', 'Three', 'Four', 'Five', 'Six'],
        datasets: [
            {
            label: 'My data',
            data: [12, 19, 3, 5, 2, 3],
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            borderColor: 'rgba(255,99,132,1)',
            borderWidth: 1,
            },
        ],
    },
});


// Get the chart's base64 image string
var image = myChart.toBase64Image();

const data2 = {
    labels: ["A", "B", "C", "D"],
    datasets: [
        {
            label: "test",
            data: [1,2,3,4],
            backgroundColor: ["#ccc", "#ccc", "#ccc", "#ccc"],

        }
    ]
}
*/

/*
const myChart = new ChartJsImage();
myChart.setConfig({
    type: 'bar',
    data: { labels: ['Hello world', 'Foo bar'], datasets: [{ label: 'Foo', data: [1, 2] }] },
});
const buf = await myChart.toBinary();
*/



// victory data
const command_completion = [
    {x: "Command 1", y: 50},
    {x: "Command 2", y: 75},
    {x: "Command 3", y: 89},
    {x: "Command 4", y: 100}
]

var c = [9, 10, 20, 10] // components
var total = c[0] + c[1] + c[2] + c[3]
const checklist_completion = [
    {x: "Completed", y: c[0]/total},
    {x: "Missing Document", y: c[1]/total},
    {x: "Awaiting Approval", y: c[2]/total},
    {x: "Incomplete", y: c[3]/total}
]

var content = [] //command_completion


/* --------------------------------------------------------------- */ 
/* --------------------------------------------------------------- */
/* --------------------------------------------------------------- */

const data = [
    { year: 2010, count: 10 },
    { year: 2011, count: 20 },
    { year: 2012, count: 15 },
    { year: 2013, count: 25 },
    { year: 2014, count: 22 },
    { year: 2015, count: 30 },
    { year: 2016, count: 28 },
  ];

const line_chart = ChartJSImage().chart({
  "type": "line",
  "data": {
    "labels": [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July"
    ],
    "datasets": [
      {
        "label": "My First dataset",
        "borderColor": "rgb(255,+99,+132)",
        "backgroundColor": "rgba(255,+99,+132,+.5)",
        "data": [
          57,
          90,
          11,
          -15,
          37,
          -37,
          -27
        ]
      },
      {
        "label": "My Second dataset",
        "borderColor": "rgb(54,+162,+235)",
        "backgroundColor": "rgba(54,+162,+235,+.5)",
        "data": [
          71,
          -36,
          -94,
          78,
          98,
          65,
          -61
        ]
      },
      {
        "label": "My Third dataset",
        "borderColor": "rgb(75,+192,+192)",
        "backgroundColor": "rgba(75,+192,+192,+.5)",
        "data": [
          48,
          -64,
          -61,
          98,
          0,
          -39,
          -70
        ]
      },
      {
        "label": "My Fourth dataset",
        "borderColor": "rgb(255,+205,+86)",
        "backgroundColor": "rgba(255,+205,+86,+.5)",
        "data": [
          -58,
          88,
          29,
          44,
          3,
          78,
          -9
        ]
      }
    ]
  },
  "options": {
    "title": {
      "display": true,
      "text": "Chart.js Line Chart"
    },
    "scales": {
      "xAxes": [
        {
          "scaleLabel": {
            "display": true,
            "labelString": "Month"
          }
        }
      ],
      "yAxes": [
        {
          "stacked": true,
          "scaleLabel": {
            "display": true,
            "labelString": "Value"
          }
        }
      ]
    }
  }
}) 

const Item = styled(Paper)(({ theme }) => ({
    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',
    ...theme.typography.body2,
    padding: theme.spacing(1),
    textAlign: 'center',
    color: theme.palette.text.secondary,
}));

const buf = line_chart.toBuffer();

const styles = StyleSheet.create({
    page: {
        flexDirection: 'row',
        backgroundColor: '#F3E9E0'
    },
    section: {
        margin: 10,
        padding: 10,
        flexGrow: 1
    }
});

const Report = () => (
    <Document>
        <Page size="A4" style={styles.page}>
            <View style={styles.section}>
                <Text> Start of Report </Text>

                <Image 
                    src ={buf}
                />          
                
                
                <Text> End of Report </Text>
                
            </View>
        </Page>
    </Document>
);


const test = new Chart(
    {
      type: 'bar',
      data: {
        labels: data.map(row => row.year),
        datasets: [
          {
            label: 'Acquisitions by year',
            data: data.map(row => row.count)
          }
        ]
      }
    }
  );



export function Graphic() {

    

    return (
        <>
            <Box sx={{ flexGrow: 1, padding: 2 }}>
                    
                <Grid container spacing={0}>
                    <Grid xs={8}>

                        <Item>
                            <PDFDownloadLink document={<Report />} fileName="report.pdf">
                                {({blob, url, loading, error}) =>
                                    loading ? 'generating document...' : 'Download Report'
                                }
                            </PDFDownloadLink>
                        </Item>

                            
                    </Grid>
                 </Grid>
            </Box>

        </>
        
    )
}

export default Graphic;